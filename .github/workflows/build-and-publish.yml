# This is a basic workflow to help you get started with Actions
name: Building and Pushing to GHCR

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on: [workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  common:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    - name: Get Changelog Entry
      id: changelog_reader
      uses: mindsers/changelog-reader-action@v2
      with:
        validation_depth: 10
        path: ./CHANGELOG.md
    - name: Get Version Info
      id: read_metadata
      run: |
        echo "Version: ${{ steps.changelog_reader.outputs.version }}"
        echo "Changes: ${{ steps.changelog_reader.outputs.changes }}"
        $owner = "${{ github.repository_owner }}".ToLower()
        echo "image_id=ghcr.io/$owner/aks/periscope" >> $env:GITHUB_OUTPUT
        echo "tag_id_base=${{ steps.changelog_reader.outputs.version }}" >> $env:GITHUB_OUTPUT
    outputs:
      image_id: ${{ steps.read_metadata.outputs.image_id }}
      tag_id_base: ${{ steps.read_metadata.outputs.tag_id_base }}
  publish:
    runs-on: ${{ matrix.os }}
    needs: common
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-2019, windows-2022]
        include:
        - os: ubuntu-latest
          file: ./builder/Dockerfile.linux
          baseimage: 'mcr.microsoft.com/cbl-mariner/distroless/base:2.0'
          tagext: 'mariner2.0'
          canpatch: true
        - os: windows-2019
          file: ./builder/Dockerfile.windows
          baseimage: 'mcr.microsoft.com/windows/nanoserver:ltsc2019'
          tagext: 'nanoserver2019'
          canpatch: false
        - os: windows-2022
          file: ./builder/Dockerfile.windows
          baseimage: 'mcr.microsoft.com/windows/nanoserver:ltsc2022'
          tagext: 'nanoserver2022'
          canpatch: false
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get Image References
      id: getref
      run: |
        $tag_id = "${{ needs.common.outputs.tag_id_base }}-${{ matrix.tagext }}"
        $image_ref = "${{ needs.common.outputs.image_id }}:$tag_id"
        echo "tag_id=$tag_id" >> $env:GITHUB_OUTPUT
        echo "image_ref=$image_ref" >> $env:GITHUB_OUTPUT
        echo "${{ matrix.os }}-image-ref=$image_ref" >> $env:GITHUB_OUTPUT
    - name: Build Image
      id: build
      run: |
        docker build -f ${{ matrix.file }} --build-arg BASE_IMAGE=${{ matrix.baseimage }} -t ${{ steps.getref.outputs.image_ref }} .
    - name: Generate Trivy Report
      if: matrix.canpatch
      uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54 # v0.11.2
      with:
        scan-type: 'image'
        format: 'json'
        output: 'report.json'
        ignore-unfixed: true
        vuln-type: 'os'
        image-ref: ${{ steps.getref.outputs.image_ref }}
    - name: Check Vuln Count
      if: matrix.canpatch
      id: vuln_cout
      run: |
        $report_file = "report.json"
        cat $report_file
        $vuln_count = jq '.Results[0].Vulnerabilities | length' $report_file
        echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT
    - name: Copa Action
      if: matrix.canpatch && steps.vuln_cout.outputs.vuln_count != '0'
      id: copa
      uses: project-copacetic/copa-action@1eb86b0907bce48225b66dc9488c7d329c2d48a0 # v1.0.0
      with:
        image: '${{ steps.getref.outputs.image_ref }}'
        image-report: 'report.json'
        patched-tag: '${{ steps.getref.outputs.tag_id }}'
        buildkit-version: 'v0.12.1'
    - name: Publish to GHCR
      id: publish
      run: |
        docker push ${{ steps.getref.outputs.image_ref }}
    outputs:
      linux: ${{ steps.getref.outputs.ubuntu-latest-image-ref }}
      win2019: ${{ steps.getref.outputs.windows-2019-image-ref }}
      win2022: ${{ steps.getref.outputs.windows-2022-image-ref }}
  update-manifest:
    runs-on: ubuntu-latest
    needs: [common, publish]
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish Cross-Platform Manifest
      id: publish
      run: |
        $xplat_image_ref = "${{ needs.common.outputs.image_id }}:${{ needs.common.outputs.tag_id_base }}"
        docker manifest create $xplat_image_ref ${{ needs.publish.outputs.linux }} ${{ needs.publish.outputs.win2019 }} ${{ needs.publish.outputs.win2022 }}
        docker manifest push $xplat_image_ref
